
#patterns
000) once a pattern has been searched, advance all heads by distance from each's current position
     right now, advancing the current cursor by distance just sets the current position as home, and all cursors align themselves continuously, not relative from their last position.
001) patterns buffer

#optimizations
000) maybe prerender the entire file, because someday I'll have a style pattern that will depend on far away contexts, contexts outside the current file string

#style
000) each level adds its own stylings: the HeadArr adds the navigation styles, the LoopRibbon adds the text file specific style. How can I unify these style inputs so they can be given all dynamically in a single level, and each goes to the appropriate level? like: [HeadArr style functions, Head style functions, LoopRibbon style functions] is just a list given to the interfacing function.

#movement
000) make the current position the home position
001) advance all heads by given distance. Like, I move the cursor in the target head by 3 spaces, then all cursors on all targets move by 3 spaces
002) move the text in the current Head so the text selected by its cursor starts at the leftmost part of the window. Kind of like moving the current text to the window home... so, move the current text to the line home.
003) in general, I'm taking a position and redrawing it to a different place. What changes is what the position is, where I am drawing it to, and who gets redrawn on the way. There are: HeadArr home, line home. There are current line, all lines. there are current position, searched pattern position. Would I need a more universal language to say What moves Where and Who is affected?

6) jump to pattern match
7) jump back and forth on pattern matches
a) multiple pattern search
b) highlight different pattern searches with different markups
c) ex command goto
d) the ex command buffer should itself be a Head()
e) highlight the window on which the ex mode is operating

11) modify the text buffer
12) undo the modification
13) save modifications to a file
14) update all windows when you modify the text
15) update certain windows when you modify the text
16) update selected windows
17) select windows by number
18) print window number
19) group selected windows

20) markup text
21) make your own markup for the current window
22) select a premade markup for the current window
23) search by markup


1) have 2 cursors, each running on a different line, with different views of the file
2) move between the two cursors to interact with them with jk
3) make terminal.height-1 cursors, printed from top to bottom
4) move to the bottom cursor
5) move to the top cursor
6) select cursors to coordinate
7) advance all cursors by pattern (\n)
   send to grouped cursors the same message

8) highlights: color the lines based on their relative position

-2
-1
0
1
2
